    1316.汇编模拟器四（实现一次子函数调用）
   
    时限：1000ms 内存限制：10000K  总时限：3000ms
   
    描述
   
    设计程序，模拟汇编语言，通过输入多条语句，对寄存器的数据进行操作，实现目标程序。32个寄存器分别为k0~k15,t0~t14,ra ，且所有寄存器已被初始化为0。
    
    现有以下7条命令：
    
    mov    例：mov k1 k2        解释：把k2的值赋给k1。
    
    Addi    例：Addi k2 k5 -4    解释：k2 = k5 - 4（加立即数）。
    
    Add    例：Add k2 k5 t8    解释：k2 = k5 + t8（加法指令）。
    
    Bgez    例：Bgez k3 0x8        解释：分支语句（k3大于等于0时跳转到0x8，0x8即标号为8的语句行）。
    
    li    例：li k3 9        解释：赋值语句，直接把9赋值给k3
    
    Jal    例：Jal 0x28        解释：函数调用（进入0x28这条语句进行子函数调用,当Jal是整个程序中第一次出现，调用结束后，0x28上一行0x24作为整个程序的结束行，0x24行也要运行,Jal语句执行时，先把当前ra寄存器的值入栈保存，再把下一条语句的地址赋给ra）。
    
    Jr    例：Jr ra        解释：函数返回（ra为返回地址，这个地址是调用此子函数的Jal所在行的下一行行标)。
   
    输入
   
    输入多条语句，每条语句前都有16进制的顺序行标号（如：0、4、8、c、10...），用来方便语句调用及语句行标号与数字的区别。
    
    例如：    0: mov k1 k2
    
    4: Bgez k3 0x0
    
    8: Jal 0x28
    
    c: ...
    
    ...
    
    24: ...
    
    28: ...
    
    ...
    
    3c: Jr ra
    
    注意：冒号后有空格。
    
    函数执行顺序为：0->4->8->28->2c->...->3c->c->...->24->结束
   
    输出
   
    输出所有寄存器的最终结果。
   
    输入样例
   
    0: li k0 2
    
    4: Jal 0xc
    
    8: Add t14 k0 t0
    
    c: mov t0 k0
    
    10: Jr ra
    
    输出样例
   
    2
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    2
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    0
    
    4
    
    0
    
    提示
   
    来源
   
